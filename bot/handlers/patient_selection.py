#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.
"""

import logging
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler

from db.database import get_db
from bot.services.patient_service import get_patient_by_telegram_id, update_patient_profile, get_decrypted_patient_data
from bot.services.mis_service import MISService

logger = logging.getLogger(__name__)

async def handle_patient_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏
    
    user = update.effective_user
    db = next(get_db())
    db_patient = get_patient_by_telegram_id(db, user.id)
    
    if not db_patient:
        logger.error(f"–ü–∞—Ü–∏–µ–Ω—Ç —Å telegram_id={user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    if db_patient.bot_state != "awaiting_patient_selection":
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ callback_data
    try:
        patient_id = int(query.data.split(":")[1])
    except (ValueError, IndexError) as e:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}. –û—à–∏–±–∫–∞: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ –ú–ò–°
    mis_service = MISService()
    patient = await mis_service.get_patient(patient_id)
    
    if patient:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        update_patient_profile(
            db, 
            user.id,
            mis_id=patient_id,
            first_name=patient.get("first_name"),
            last_name=patient.get("last_name"),
            third_name=patient.get("third_name"),
            bot_state="active",
            registration_date=datetime.utcnow(),  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            registered_in_bot=True
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        db_patient = get_patient_by_telegram_id(db, user.id)
        patient_data = get_decrypted_patient_data(db, db_patient)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        first_name = patient_data.get("first_name", "")
        third_name = patient_data.get("third_name", "")
        greeting_name = f"{first_name}"
        if third_name:
            greeting_name += f" {third_name}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.edit_text(
            f"‚úÖ {greeting_name}, –º—ã —Ä–∞–¥—ã –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ –ö–ª–∏–Ω–∏–∫–∏ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏ –∏ –ø—Å–∏—Ö—Å–æ–º–∞—Ç–∏–∫–∏ üåû"
        )
    else:
        # –ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        logger.error(f"–ü–∞—Ü–∏–µ–Ω—Ç —Å ID={patient_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ú–ò–°")
        update_patient_profile(db, user.id, bot_state="awaiting_phone_number")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await query.message.edit_text(
            "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∫–ª–∏–Ω–∏–∫—É."
        )
    
    db.close()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
patient_selection_handler = CallbackQueryHandler(
    handle_patient_selection,
    pattern=r"^select_patient:[0-9]+$"
)
